
STMViewer_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003280  08003280  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003280  08003280  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003280  08003280  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000001c  080032a4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080032a4  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068b4  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fa  00000000  00000000  00026900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00027d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  000282f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284da  00000000  00000000  00028828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d21  00000000  00000000  00050d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f10c2  00000000  00000000  00056a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00147ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001838  00000000  00000000  00147b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002da0 	.word	0x08002da0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08002da0 	.word	0x08002da0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <maincpp>:

TestClass test;
volatile float sinTest = 0.0f;

void maincpp()
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
	float x = 0;
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]

	while (1)
	{
		sinTest = test.getSin(x);
 80006ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <maincpp+0x90>)
 80006b2:	f000 f847 	bl	8000744 <_ZN9TestClass6getSinEf>
 80006b6:	eef0 7a40 	vmov.f32	s15, s0
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <maincpp+0x94>)
 80006bc:	edc3 7a00 	vstr	s15, [r3]
		x += 0.001f;
 80006c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000738 <maincpp+0x98>
 80006c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006cc:	edc7 7a01 	vstr	s15, [r7, #4]

		if (x > 6.28f)
 80006d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800073c <maincpp+0x9c>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	dd02      	ble.n	80006e8 <maincpp+0x48>
			x = 0.0f;
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]

		if(sinTest > 3.14)
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <maincpp+0x94>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fef7 	bl	80004e0 <__aeabi_f2d>
 80006f2:	2301      	movs	r3, #1
 80006f4:	461c      	mov	r4, r3
 80006f6:	a30c      	add	r3, pc, #48	; (adr r3, 8000728 <maincpp+0x88>)
 80006f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fc:	f7ff ffc6 	bl	800068c <__aeabi_dcmpgt>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <maincpp+0x6a>
 8000706:	2300      	movs	r3, #0
 8000708:	461c      	mov	r4, r3
 800070a:	b2e3      	uxtb	r3, r4
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <maincpp+0x7a>
			LED_G_ON;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <maincpp+0xa0>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	619a      	str	r2, [r3, #24]
 8000718:	e7c8      	b.n	80006ac <maincpp+0xc>
		else
			LED_G_OFF;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <maincpp+0xa0>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
		sinTest = test.getSin(x);
 8000722:	e7c3      	b.n	80006ac <maincpp+0xc>
 8000724:	f3af 8000 	nop.w
 8000728:	51eb851f 	.word	0x51eb851f
 800072c:	40091eb8 	.word	0x40091eb8
 8000730:	20000000 	.word	0x20000000
 8000734:	20000038 	.word	0x20000038
 8000738:	3a83126f 	.word	0x3a83126f
 800073c:	40c8f5c3 	.word	0x40c8f5c3
 8000740:	48000800 	.word	0x48000800

08000744 <_ZN9TestClass6getSinEf>:
#include "testClass.hpp"
#include "math.h"


float TestClass::getSin(float x)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	ed87 0a00 	vstr	s0, [r7]
	return sinf(x);
 8000750:	ed97 0a00 	vldr	s0, [r7]
 8000754:	f001 fcc8 	bl	80020e8 <sinf>
 8000758:	eef0 7a40 	vmov.f32	s15, s0
}
 800075c:	eeb0 0a67 	vmov.f32	s0, s15
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800078e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4313      	orrs	r3, r2
 8000796:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800079a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4013      	ands	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40021000 	.word	0x40021000

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 f92f 	bl	8000a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f805 	bl	80007ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f850 	bl	8000864 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  maincpp();
 80007c4:	f7ff ff6c 	bl	80006a0 <maincpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x14>

080007ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b094      	sub	sp, #80	; 0x50
 80007ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	2238      	movs	r2, #56	; 0x38
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fad9 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f0:	f000 fa8c 	bl	8000d0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000806:	2302      	movs	r3, #2
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800080a:	2304      	movs	r3, #4
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800080e:	234b      	movs	r3, #75	; 0x4b
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fb26 	bl	8000e74 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800082e:	f000 f85b 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2303      	movs	r3, #3
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2104      	movs	r1, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ff24 	bl	8001698 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000856:	f000 f847 	bl	80008e8 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff ff82 	bl	8000784 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ff7f 	bl	8000784 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	4816      	ldr	r0, [pc, #88]	; (80008e4 <MX_GPIO_Init+0x80>)
 800088c:	f7ff ff6b 	bl	8000766 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_GPIO_Init+0x80>)
 8000896:	f7ff ff66 	bl	8000766 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a0:	2301      	movs	r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_GPIO_Init+0x80>)
 80008b6:	f001 fae3 	bl	8001e80 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 80008ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_GPIO_Init+0x80>)
 80008d6:	f001 fad3 	bl	8001e80 <LL_GPIO_Init>

}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	48000800 	.word	0x48000800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>

080008f2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f890 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009f2:	f7ff ffd7 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f002 f9a7 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009fa:	f7ff fedb 	bl	80007b4 <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a0c:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 8000a10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a14:	20000040 	.word	0x20000040

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>

08000a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f91b 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f80e 	bl	8000a4c <HAL_InitTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e001      	b.n	8000a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3c:	f7ff ff64 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a40:	79fb      	ldrb	r3, [r7, #7]

}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d022      	beq.n	8000aa6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f93d 	bl	8000cf4 <HAL_SYSTICK_Config>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10f      	bne.n	8000aa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d809      	bhi.n	8000a9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	2200      	movs	r2, #0
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8e:	f000 f907 	bl	8000ca0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0x70>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e007      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e004      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e001      	b.n	8000aaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000018 	.word	0x20000018
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000014 	.word	0x20000014

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a03      	ldr	r2, [pc, #12]	; (8000adc <HAL_IncTick+0x1c>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	2000003c 	.word	0x2000003c
 8000ae0:	20000018 	.word	0x20000018

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	2000003c 	.word	0x2000003c

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d00f      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d00c      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	d009      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d006      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d003      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c86:	21a6      	movs	r1, #166	; 0xa6
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c8a:	f7ff fe32 	bl	80008f2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff34 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08002db8 	.word	0x08002db8

08000ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d903      	bls.n	8000cbc <HAL_NVIC_SetPriority+0x1c>
 8000cb4:	21be      	movs	r1, #190	; 0xbe
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <HAL_NVIC_SetPriority+0x50>)
 8000cb8:	f7ff fe1b 	bl	80008f2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d903      	bls.n	8000cca <HAL_NVIC_SetPriority+0x2a>
 8000cc2:	21bf      	movs	r1, #191	; 0xbf
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <HAL_NVIC_SetPriority+0x50>)
 8000cc6:	f7ff fe14 	bl	80008f2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cca:	f7ff ff3b 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6978      	ldr	r0, [r7, #20]
 8000cd6:	f7ff ff6d 	bl	8000bb4 <NVIC_EncodePriority>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff3c 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08002db8 	.word	0x08002db8

08000cf4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff8d 	bl	8000c1c <SysTick_Config>
 8000d02:	4603      	mov	r3, r0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00b      	beq.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d20:	d007      	beq.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d28:	d003      	beq.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x26>
 8000d2a:	219d      	movs	r1, #157	; 0x9d
 8000d2c:	484d      	ldr	r0, [pc, #308]	; (8000e64 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8000d2e:	f7ff fde0 	bl	80008f2 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d141      	bne.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d44:	d131      	bne.n	8000daa <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d46:	4b48      	ldr	r3, [pc, #288]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d4c:	4a46      	ldr	r2, [pc, #280]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d5e:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2232      	movs	r2, #50	; 0x32
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	4a3f      	ldr	r2, [pc, #252]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	0c9b      	lsrs	r3, r3, #18
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d7c:	e002      	b.n	8000d84 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d90:	d102      	bne.n	8000d98 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f2      	bne.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da4:	d158      	bne.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e057      	b.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000db6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dba:	e04d      	b.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc2:	d141      	bne.n	8000e48 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd0:	d131      	bne.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd8:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dea:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2232      	movs	r2, #50	; 0x32
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	0c9b      	lsrs	r3, r3, #18
 8000e04:	3301      	adds	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e08:	e002      	b.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1c:	d102      	bne.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x118>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f2      	bne.n	8000e0a <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e30:	d112      	bne.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e011      	b.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e46:	e007      	b.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e50:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08002df4 	.word	0x08002df4
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	431bde83 	.word	0x431bde83

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f000 bc02 	b.w	800168c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d022      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x62>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11c      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x62>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d116      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x62>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d110      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x62>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10a      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x62>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d104      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x62>
 8000ecc:	f240 1145 	movw	r1, #325	; 0x145
 8000ed0:	4892      	ldr	r0, [pc, #584]	; (800111c <HAL_RCC_OscConfig+0x2a8>)
 8000ed2:	f7ff fd0e 	bl	80008f2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8089 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00e      	beq.n	8000f0a <HAL_RCC_OscConfig+0x96>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d009      	beq.n	8000f0a <HAL_RCC_OscConfig+0x96>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000efe:	d004      	beq.n	8000f0a <HAL_RCC_OscConfig+0x96>
 8000f00:	f240 114b 	movw	r1, #331	; 0x14b
 8000f04:	4885      	ldr	r0, [pc, #532]	; (800111c <HAL_RCC_OscConfig+0x2a8>)
 8000f06:	f7ff fcf4 	bl	80008f2 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0a:	4b85      	ldr	r3, [pc, #532]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f14:	4b82      	ldr	r3, [pc, #520]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	d102      	bne.n	8000f2a <HAL_RCC_OscConfig+0xb6>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d002      	beq.n	8000f30 <HAL_RCC_OscConfig+0xbc>
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d10b      	bne.n	8000f48 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	4b7b      	ldr	r3, [pc, #492]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d05b      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x180>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d157      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e3a1      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d106      	bne.n	8000f60 <HAL_RCC_OscConfig+0xec>
 8000f52:	4b73      	ldr	r3, [pc, #460]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a72      	ldr	r2, [pc, #456]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0x128>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x110>
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6c      	ldr	r2, [pc, #432]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6a      	ldr	r3, [pc, #424]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a69      	ldr	r2, [pc, #420]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0x128>
 8000f84:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a65      	ldr	r2, [pc, #404]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b63      	ldr	r3, [pc, #396]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a62      	ldr	r2, [pc, #392]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fd9e 	bl	8000ae4 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fd9a 	bl	8000ae4 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e366      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fbe:	4b58      	ldr	r3, [pc, #352]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0x138>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fd8a 	bl	8000ae4 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fd86 	bl	8000ae4 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e352      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x160>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8093 	beq.w	800112a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d009      	beq.n	8001020 <HAL_RCC_OscConfig+0x1ac>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001014:	d004      	beq.n	8001020 <HAL_RCC_OscConfig+0x1ac>
 8001016:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800101a:	4840      	ldr	r0, [pc, #256]	; (800111c <HAL_RCC_OscConfig+0x2a8>)
 800101c:	f7ff fc69 	bl	80008f2 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b7f      	cmp	r3, #127	; 0x7f
 8001026:	d904      	bls.n	8001032 <HAL_RCC_OscConfig+0x1be>
 8001028:	f240 1181 	movw	r1, #385	; 0x181
 800102c:	483b      	ldr	r0, [pc, #236]	; (800111c <HAL_RCC_OscConfig+0x2a8>)
 800102e:	f7ff fc60 	bl	80008f2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	d102      	bne.n	8001052 <HAL_RCC_OscConfig+0x1de>
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d002      	beq.n	8001058 <HAL_RCC_OscConfig+0x1e4>
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d11f      	bne.n	8001098 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x1fc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e30d      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	061b      	lsls	r3, r3, #24
 800107e:	4928      	ldr	r1, [pc, #160]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_RCC_OscConfig+0x2b0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fcdf 	bl	8000a4c <HAL_InitTick>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d049      	beq.n	8001128 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e2f9      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d023      	beq.n	80010e8 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fd1a 	bl	8000ae4 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fd16 	bl	8000ae4 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e2e2      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	061b      	lsls	r3, r3, #24
 80010e0:	490f      	ldr	r1, [pc, #60]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
 80010e6:	e020      	b.n	800112a <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fcf6 	bl	8000ae4 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fcf2 	bl	8000ae4 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e2be      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x288>
 800111a:	e006      	b.n	800112a <HAL_RCC_OscConfig+0x2b6>
 800111c:	08002e30 	.word	0x08002e30
 8001120:	40021000 	.word	0x40021000
 8001124:	20000014 	.word	0x20000014
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d049      	beq.n	80011ca <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d008      	beq.n	8001150 <HAL_RCC_OscConfig+0x2dc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d004      	beq.n	8001150 <HAL_RCC_OscConfig+0x2dc>
 8001146:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800114a:	48a3      	ldr	r0, [pc, #652]	; (80013d8 <HAL_RCC_OscConfig+0x564>)
 800114c:	f7ff fbd1 	bl	80008f2 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01c      	beq.n	8001192 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001158:	4ba0      	ldr	r3, [pc, #640]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 800115a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115e:	4a9f      	ldr	r2, [pc, #636]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fcbc 	bl	8000ae4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fcb8 	bl	8000ae4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e284      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001182:	4b96      	ldr	r3, [pc, #600]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ef      	beq.n	8001170 <HAL_RCC_OscConfig+0x2fc>
 8001190:	e01b      	b.n	80011ca <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	4a90      	ldr	r2, [pc, #576]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a2:	f7ff fc9f 	bl	8000ae4 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc9b 	bl	8000ae4 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e267      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011bc:	4b87      	ldr	r3, [pc, #540]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80011be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1ef      	bne.n	80011aa <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80b7 	beq.w	8001346 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_RCC_OscConfig+0x38a>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d008      	beq.n	80011fe <HAL_RCC_OscConfig+0x38a>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d004      	beq.n	80011fe <HAL_RCC_OscConfig+0x38a>
 80011f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011f8:	4877      	ldr	r0, [pc, #476]	; (80013d8 <HAL_RCC_OscConfig+0x564>)
 80011fa:	f7ff fb7a 	bl	80008f2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011fe:	4b77      	ldr	r3, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x39a>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x39c>
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00d      	beq.n	8001230 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b71      	ldr	r3, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a70      	ldr	r2, [pc, #448]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b6e      	ldr	r3, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800122c:	2301      	movs	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <HAL_RCC_OscConfig+0x56c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d118      	bne.n	800126e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x56c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a67      	ldr	r2, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x56c>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001248:	f7ff fc4c 	bl	8000ae4 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001250:	f7ff fc48 	bl	8000ae4 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e214      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x56c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_RCC_OscConfig+0x414>
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127c:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001286:	e024      	b.n	80012d2 <HAL_RCC_OscConfig+0x45e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d110      	bne.n	80012b2 <HAL_RCC_OscConfig+0x43e>
 8001290:	4b52      	ldr	r3, [pc, #328]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a51      	ldr	r2, [pc, #324]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	4a4d      	ldr	r2, [pc, #308]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b0:	e00f      	b.n	80012d2 <HAL_RCC_OscConfig+0x45e>
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b8:	4a48      	ldr	r2, [pc, #288]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c8:	4a44      	ldr	r2, [pc, #272]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fc03 	bl	8000ae4 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fbff 	bl	8000ae4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1c9      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80012fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0ed      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46e>
 8001306:	e015      	b.n	8001334 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fbec 	bl	8000ae4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001310:	f7ff fbe8 	bl	8000ae4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1b2      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ed      	bne.n	8001310 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d105      	bne.n	8001346 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	2b00      	cmp	r3, #0
 8001350:	d04f      	beq.n	80013f2 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <HAL_RCC_OscConfig+0x4f8>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d004      	beq.n	800136c <HAL_RCC_OscConfig+0x4f8>
 8001362:	f240 213b 	movw	r1, #571	; 0x23b
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <HAL_RCC_OscConfig+0x564>)
 8001368:	f7ff fac3 	bl	80008f2 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01c      	beq.n	80013ae <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 8001376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fbae 	bl	8000ae4 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800138c:	f7ff fbaa 	bl	8000ae4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e176      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80013a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0ef      	beq.n	800138c <HAL_RCC_OscConfig+0x518>
 80013ac:	e021      	b.n	80013f2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80013b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b4:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_RCC_OscConfig+0x568>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff fb91 	bl	8000ae4 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013c4:	e00e      	b.n	80013e4 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c6:	f7ff fb8d 	bl	8000ae4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d907      	bls.n	80013e4 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e159      	b.n	800168c <HAL_RCC_OscConfig+0x818>
 80013d8:	08002e30 	.word	0x08002e30
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013e4:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80013e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1e9      	bne.n	80013c6 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x5a0>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d008      	beq.n	8001414 <HAL_RCC_OscConfig+0x5a0>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d004      	beq.n	8001414 <HAL_RCC_OscConfig+0x5a0>
 800140a:	f44f 7119 	mov.w	r1, #612	; 0x264
 800140e:	4880      	ldr	r0, [pc, #512]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 8001410:	f7ff fa6f 	bl	80008f2 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8136 	beq.w	800168a <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141e:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x798>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b0c      	cmp	r3, #12
 8001428:	f000 80ea 	beq.w	8001600 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b02      	cmp	r3, #2
 8001432:	f040 80bd 	bne.w	80015b0 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00c      	beq.n	8001458 <HAL_RCC_OscConfig+0x5e4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d008      	beq.n	8001458 <HAL_RCC_OscConfig+0x5e4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d004      	beq.n	8001458 <HAL_RCC_OscConfig+0x5e4>
 800144e:	f240 216e 	movw	r1, #622	; 0x26e
 8001452:	486f      	ldr	r0, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 8001454:	f7ff fa4d 	bl	80008f2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_RCC_OscConfig+0x5f4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	2b10      	cmp	r3, #16
 8001466:	d904      	bls.n	8001472 <HAL_RCC_OscConfig+0x5fe>
 8001468:	f240 216f 	movw	r1, #623	; 0x26f
 800146c:	4868      	ldr	r0, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 800146e:	f7ff fa40 	bl	80008f2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	2b07      	cmp	r3, #7
 8001478:	d903      	bls.n	8001482 <HAL_RCC_OscConfig+0x60e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	2b7f      	cmp	r3, #127	; 0x7f
 8001480:	d904      	bls.n	800148c <HAL_RCC_OscConfig+0x618>
 8001482:	f44f 711c 	mov.w	r1, #624	; 0x270
 8001486:	4862      	ldr	r0, [pc, #392]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 8001488:	f7ff fa33 	bl	80008f2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b01      	cmp	r3, #1
 8001492:	d903      	bls.n	800149c <HAL_RCC_OscConfig+0x628>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b1f      	cmp	r3, #31
 800149a:	d904      	bls.n	80014a6 <HAL_RCC_OscConfig+0x632>
 800149c:	f240 2171 	movw	r1, #625	; 0x271
 80014a0:	485b      	ldr	r0, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 80014a2:	f7ff fa26 	bl	80008f2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d010      	beq.n	80014d0 <HAL_RCC_OscConfig+0x65c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d00c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x65c>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d008      	beq.n	80014d0 <HAL_RCC_OscConfig+0x65c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d004      	beq.n	80014d0 <HAL_RCC_OscConfig+0x65c>
 80014c6:	f240 2172 	movw	r1, #626	; 0x272
 80014ca:	4851      	ldr	r0, [pc, #324]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 80014cc:	f7ff fa11 	bl	80008f2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d010      	beq.n	80014fa <HAL_RCC_OscConfig+0x686>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d00c      	beq.n	80014fa <HAL_RCC_OscConfig+0x686>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	2b06      	cmp	r3, #6
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_OscConfig+0x686>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d004      	beq.n	80014fa <HAL_RCC_OscConfig+0x686>
 80014f0:	f240 2173 	movw	r1, #627	; 0x273
 80014f4:	4846      	ldr	r0, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x79c>)
 80014f6:	f7ff f9fc 	bl	80008f2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a43      	ldr	r2, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x798>)
 8001500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001506:	f7ff faed 	bl	8000ae4 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff fae9 	bl	8000ae4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0b5      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_RCC_OscConfig+0x798>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152c:	4b37      	ldr	r3, [pc, #220]	; (800160c <HAL_RCC_OscConfig+0x798>)
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_RCC_OscConfig+0x7a0>)
 8001532:	4013      	ands	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6a11      	ldr	r1, [r2, #32]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800153c:	3a01      	subs	r2, #1
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	4311      	orrs	r1, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001546:	0212      	lsls	r2, r2, #8
 8001548:	4311      	orrs	r1, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800154e:	0852      	lsrs	r2, r2, #1
 8001550:	3a01      	subs	r2, #1
 8001552:	0552      	lsls	r2, r2, #21
 8001554:	4311      	orrs	r1, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800155a:	0852      	lsrs	r2, r2, #1
 800155c:	3a01      	subs	r2, #1
 800155e:	0652      	lsls	r2, r2, #25
 8001560:	4311      	orrs	r1, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001566:	06d2      	lsls	r2, r2, #27
 8001568:	430a      	orrs	r2, r1
 800156a:	4928      	ldr	r1, [pc, #160]	; (800160c <HAL_RCC_OscConfig+0x798>)
 800156c:	4313      	orrs	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x798>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a25      	ldr	r2, [pc, #148]	; (800160c <HAL_RCC_OscConfig+0x798>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_OscConfig+0x798>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_RCC_OscConfig+0x798>)
 8001582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001586:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff faac 	bl	8000ae4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff faa8 	bl	8000ae4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e074      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x71c>
 80015ae:	e06c      	b.n	800168a <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015c2:	f023 0303 	bic.w	r3, r3, #3
 80015c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fa84 	bl	8000ae4 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fa80 	bl	8000ae4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e04c      	b.n	800168c <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_OscConfig+0x798>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x76c>
 80015fe:	e044      	b.n	800168a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e03f      	b.n	800168c <HAL_RCC_OscConfig+0x818>
 800160c:	40021000 	.word	0x40021000
 8001610:	08002e30 	.word	0x08002e30
 8001614:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_OscConfig+0x820>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	429a      	cmp	r2, r3
 800162a:	d12c      	bne.n	8001686 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	3b01      	subs	r3, #1
 8001638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d123      	bne.n	8001686 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d11b      	bne.n	8001686 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d113      	bne.n	8001686 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d109      	bne.n	8001686 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e1e2      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x30>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 030f 	bic.w	r3, r3, #15
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x3a>
 80016c8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80016cc:	4869      	ldr	r0, [pc, #420]	; (8001874 <HAL_RCC_ClockConfig+0x1dc>)
 80016ce:	f7ff f910 	bl	80008f2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d031      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d02e      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d02b      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d028      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d025      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d022      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d01f      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b07      	cmp	r3, #7
 8001700:	d01c      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d019      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b09      	cmp	r3, #9
 800170c:	d016      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d013      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b0b      	cmp	r3, #11
 8001718:	d010      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d00d      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b0d      	cmp	r3, #13
 8001724:	d00a      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b0e      	cmp	r3, #14
 800172a:	d007      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	d004      	beq.n	800173c <HAL_RCC_ClockConfig+0xa4>
 8001732:	f240 310d 	movw	r1, #781	; 0x30d
 8001736:	484f      	ldr	r0, [pc, #316]	; (8001874 <HAL_RCC_ClockConfig+0x1dc>)
 8001738:	f7ff f8db 	bl	80008f2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_ClockConfig+0x1e0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d910      	bls.n	800176c <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_RCC_ClockConfig+0x1e0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 020f 	bic.w	r2, r3, #15
 8001752:	4949      	ldr	r1, [pc, #292]	; (8001878 <HAL_RCC_ClockConfig+0x1e0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1e0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e184      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808e 	beq.w	8001896 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d00c      	beq.n	800179c <HAL_RCC_ClockConfig+0x104>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d008      	beq.n	800179c <HAL_RCC_ClockConfig+0x104>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d004      	beq.n	800179c <HAL_RCC_ClockConfig+0x104>
 8001792:	f44f 7149 	mov.w	r1, #804	; 0x324
 8001796:	4837      	ldr	r0, [pc, #220]	; (8001874 <HAL_RCC_ClockConfig+0x1dc>)
 8001798:	f7ff f8ab 	bl	80008f2 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d129      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e160      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017b4:	f000 f9d2 	bl	8001b5c <RCC_GetSysClockFreqFromPLLSource>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4a30      	ldr	r2, [pc, #192]	; (8001880 <HAL_RCC_ClockConfig+0x1e8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d93f      	bls.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d033      	beq.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d12f      	bne.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e024      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e132      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e12a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001820:	f000 f93a 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_RCC_ClockConfig+0x1e8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d909      	bls.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	490b      	ldr	r1, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1e4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001854:	f7ff f946 	bl	8000ae4 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e013      	b.n	8001884 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff f942 	bl	8000ae4 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d90a      	bls.n	8001884 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e101      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
 8001872:	bf00      	nop
 8001874:	08002e30 	.word	0x08002e30
 8001878:	40022000 	.word	0x40022000
 800187c:	40021000 	.word	0x40021000
 8001880:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001884:	4b7e      	ldr	r3, [pc, #504]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 020c 	and.w	r2, r3, #12
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	429a      	cmp	r2, r3
 8001894:	d1e2      	bne.n	800185c <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d04c      	beq.n	800193c <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ae:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 80018b4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b8:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018c6:	4b6e      	ldr	r3, [pc, #440]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018ce:	4a6c      	ldr	r2, [pc, #432]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 80018d0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d4:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d024      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d020      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b90      	cmp	r3, #144	; 0x90
 80018ec:	d01c      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2ba0      	cmp	r3, #160	; 0xa0
 80018f4:	d018      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2bb0      	cmp	r3, #176	; 0xb0
 80018fc:	d014      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2bc0      	cmp	r3, #192	; 0xc0
 8001904:	d010      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2bd0      	cmp	r3, #208	; 0xd0
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2be0      	cmp	r3, #224	; 0xe0
 8001914:	d008      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2bf0      	cmp	r3, #240	; 0xf0
 800191c:	d004      	beq.n	8001928 <HAL_RCC_ClockConfig+0x290>
 800191e:	f240 317b 	movw	r1, #891	; 0x37b
 8001922:	4858      	ldr	r0, [pc, #352]	; (8001a84 <HAL_RCC_ClockConfig+0x3ec>)
 8001924:	f7fe ffe5 	bl	80008f2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4952      	ldr	r1, [pc, #328]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
 800193a:	e008      	b.n	800194e <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b80      	cmp	r3, #128	; 0x80
 8001940:	d105      	bne.n	800194e <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001942:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800194c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <HAL_RCC_ClockConfig+0x3f0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d21d      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_ClockConfig+0x3f0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 020f 	bic.w	r2, r3, #15
 8001964:	4948      	ldr	r1, [pc, #288]	; (8001a88 <HAL_RCC_ClockConfig+0x3f0>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800196c:	f7ff f8ba 	bl	8000ae4 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f8b6 	bl	8000ae4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e075      	b.n	8001a76 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_RCC_ClockConfig+0x3f0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d1ed      	bne.n	8001974 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d025      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d018      	beq.n	80019de <HAL_RCC_ClockConfig+0x346>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b4:	d013      	beq.n	80019de <HAL_RCC_ClockConfig+0x346>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019be:	d00e      	beq.n	80019de <HAL_RCC_ClockConfig+0x346>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x346>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019d2:	d004      	beq.n	80019de <HAL_RCC_ClockConfig+0x346>
 80019d4:	f240 319d 	movw	r1, #925	; 0x39d
 80019d8:	482a      	ldr	r0, [pc, #168]	; (8001a84 <HAL_RCC_ClockConfig+0x3ec>)
 80019da:	f7fe ff8a 	bl	80008f2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4925      	ldr	r1, [pc, #148]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d026      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x39e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0c:	d013      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x39e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a16:	d00e      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x39e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x39e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a2a:	d004      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x39e>
 8001a2c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001a30:	4814      	ldr	r0, [pc, #80]	; (8001a84 <HAL_RCC_ClockConfig+0x3ec>)
 8001a32:	f7fe ff5e 	bl	80008f2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4a:	f000 f825 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_ClockConfig+0x3e8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	490c      	ldr	r1, [pc, #48]	; (8001a8c <HAL_RCC_ClockConfig+0x3f4>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <HAL_RCC_ClockConfig+0x3f8>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x3fc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe ffec 	bl	8000a4c <HAL_InitTick>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08002e30 	.word	0x08002e30
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	08002ea0 	.word	0x08002ea0
 8001a90:	20000010 	.word	0x20000010
 8001a94:	20000014 	.word	0x20000014

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e047      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e03e      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d136      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aec:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af6:	68d2      	ldr	r2, [r2, #12]
 8001af8:	0a12      	lsrs	r2, r2, #8
 8001afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
      break;
 8001b04:	e00c      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b06:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	0a12      	lsrs	r2, r2, #8
 8001b14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0e5b      	lsrs	r3, r3, #25
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e001      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b40:	693b      	ldr	r3, [r7, #16]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	007a1200 	.word	0x007a1200

08001b5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3301      	adds	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d10c      	bne.n	8001b9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b8a:	68d2      	ldr	r2, [r2, #12]
 8001b8c:	0a12      	lsrs	r2, r2, #8
 8001b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
    break;
 8001b98:	e00c      	b.n	8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ba4:	68d2      	ldr	r2, [r2, #12]
 8001ba6:	0a12      	lsrs	r2, r2, #8
 8001ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    break;
 8001bb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0e5b      	lsrs	r3, r3, #25
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	007a1200 	.word	0x007a1200
 8001be4:	00f42400 	.word	0x00f42400

08001be8 <LL_GPIO_SetPinMode>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	; 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	61fb      	str	r3, [r7, #28]
  return result;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	372c      	adds	r7, #44	; 0x2c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_GPIO_SetPinOutputType>:
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	605a      	str	r2, [r3, #4]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_GPIO_SetPinSpeed>:
{
 8001c92:	b480      	push	{r7}
 8001c94:	b08b      	sub	sp, #44	; 0x2c
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	613b      	str	r3, [r7, #16]
  return result;
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	61fb      	str	r3, [r7, #28]
  return result;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e003      	b.n	8001cf2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]
}
 8001d00:	bf00      	nop
 8001d02:	372c      	adds	r7, #44	; 0x2c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_GPIO_SetPinPull>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b08b      	sub	sp, #44	; 0x2c
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	613b      	str	r3, [r7, #16]
  return result;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e003      	b.n	8001d3e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2103      	movs	r1, #3
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	61fb      	str	r3, [r7, #28]
  return result;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	60da      	str	r2, [r3, #12]
}
 8001d7a:	bf00      	nop
 8001d7c:	372c      	adds	r7, #44	; 0x2c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_GPIO_SetAFPin_0_7>:
{
 8001d86:	b480      	push	{r7}
 8001d88:	b08b      	sub	sp, #44	; 0x2c
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	613b      	str	r3, [r7, #16]
  return result;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	210f      	movs	r1, #15
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	61fb      	str	r3, [r7, #28]
  return result;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e003      	b.n	8001de6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	431a      	orrs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	621a      	str	r2, [r3, #32]
}
 8001df4:	bf00      	nop
 8001df6:	372c      	adds	r7, #44	; 0x2c
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_GPIO_SetAFPin_8_15>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	613b      	str	r3, [r7, #16]
  return result;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e003      	b.n	8001e34 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	210f      	movs	r1, #15
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	61fb      	str	r3, [r7, #28]
  return result;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e003      	b.n	8001e64 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e72:	bf00      	nop
 8001e74:	372c      	adds	r7, #44	; 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e90:	d01b      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a8d      	ldr	r2, [pc, #564]	; (80020cc <LL_GPIO_Init+0x24c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d017      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a8c      	ldr	r2, [pc, #560]	; (80020d0 <LL_GPIO_Init+0x250>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <LL_GPIO_Init+0x254>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00f      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a8a      	ldr	r2, [pc, #552]	; (80020d8 <LL_GPIO_Init+0x258>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a89      	ldr	r2, [pc, #548]	; (80020dc <LL_GPIO_Init+0x25c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a88      	ldr	r2, [pc, #544]	; (80020e0 <LL_GPIO_Init+0x260>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <LL_GPIO_Init+0x4a>
 8001ec2:	21ae      	movs	r1, #174	; 0xae
 8001ec4:	4887      	ldr	r0, [pc, #540]	; (80020e4 <LL_GPIO_Init+0x264>)
 8001ec6:	f7fe fd14 	bl	80008f2 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <LL_GPIO_Init+0x5c>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eda:	d303      	bcc.n	8001ee4 <LL_GPIO_Init+0x64>
 8001edc:	21af      	movs	r1, #175	; 0xaf
 8001ede:	4881      	ldr	r0, [pc, #516]	; (80020e4 <LL_GPIO_Init+0x264>)
 8001ee0:	f7fe fd07 	bl	80008f2 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00f      	beq.n	8001f0c <LL_GPIO_Init+0x8c>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d00b      	beq.n	8001f0c <LL_GPIO_Init+0x8c>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d007      	beq.n	8001f0c <LL_GPIO_Init+0x8c>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d003      	beq.n	8001f0c <LL_GPIO_Init+0x8c>
 8001f04:	21b0      	movs	r1, #176	; 0xb0
 8001f06:	4877      	ldr	r0, [pc, #476]	; (80020e4 <LL_GPIO_Init+0x264>)
 8001f08:	f7fe fcf3 	bl	80008f2 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <LL_GPIO_Init+0xac>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d007      	beq.n	8001f2c <LL_GPIO_Init+0xac>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d003      	beq.n	8001f2c <LL_GPIO_Init+0xac>
 8001f24:	21b1      	movs	r1, #177	; 0xb1
 8001f26:	486f      	ldr	r0, [pc, #444]	; (80020e4 <LL_GPIO_Init+0x264>)
 8001f28:	f7fe fce3 	bl	80008f2 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	60fb      	str	r3, [r7, #12]
  return result;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <LL_GPIO_Init+0xc8>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e003      	b.n	8001f50 <LL_GPIO_Init+0xd0>
  return __builtin_clz(value);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f52:	e0ad      	b.n	80020b0 <LL_GPIO_Init+0x230>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 809f 	beq.w	80020aa <LL_GPIO_Init+0x22a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d003      	beq.n	8001f7c <LL_GPIO_Init+0xfc>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d12e      	bne.n	8001fda <LL_GPIO_Init+0x15a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00f      	beq.n	8001fa4 <LL_GPIO_Init+0x124>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d00b      	beq.n	8001fa4 <LL_GPIO_Init+0x124>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d007      	beq.n	8001fa4 <LL_GPIO_Init+0x124>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d003      	beq.n	8001fa4 <LL_GPIO_Init+0x124>
 8001f9c:	21c2      	movs	r1, #194	; 0xc2
 8001f9e:	4851      	ldr	r0, [pc, #324]	; (80020e4 <LL_GPIO_Init+0x264>)
 8001fa0:	f7fe fca7 	bl	80008f2 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff fe70 	bl	8001c92 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <LL_GPIO_Init+0x14a>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d003      	beq.n	8001fca <LL_GPIO_Init+0x14a>
 8001fc2:	21c8      	movs	r1, #200	; 0xc8
 8001fc4:	4847      	ldr	r0, [pc, #284]	; (80020e4 <LL_GPIO_Init+0x264>)
 8001fc6:	f7fe fc94 	bl	80008f2 <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6819      	ldr	r1, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fe44 	bl	8001c62 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fe92 	bl	8001d0c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d155      	bne.n	800209c <LL_GPIO_Init+0x21c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03f      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d03b      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d037      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d033      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d02f      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d02b      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	2b06      	cmp	r3, #6
 8002026:	d027      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	2b07      	cmp	r3, #7
 800202e:	d023      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d01f      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	2b09      	cmp	r3, #9
 800203e:	d01b      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d017      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b0b      	cmp	r3, #11
 800204e:	d013      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d00f      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	2b0d      	cmp	r3, #13
 800205e:	d00b      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b0e      	cmp	r3, #14
 8002066:	d007      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d003      	beq.n	8002078 <LL_GPIO_Init+0x1f8>
 8002070:	21d4      	movs	r1, #212	; 0xd4
 8002072:	481c      	ldr	r0, [pc, #112]	; (80020e4 <LL_GPIO_Init+0x264>)
 8002074:	f7fe fc3d 	bl	80008f2 <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2bff      	cmp	r3, #255	; 0xff
 800207c:	d807      	bhi.n	800208e <LL_GPIO_Init+0x20e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	461a      	mov	r2, r3
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe7d 	bl	8001d86 <LL_GPIO_SetAFPin_0_7>
 800208c:	e006      	b.n	800209c <LL_GPIO_Init+0x21c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	461a      	mov	r2, r3
 8002094:	69b9      	ldr	r1, [r7, #24]
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff feb2 	bl	8001e00 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	461a      	mov	r2, r3
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fd9f 	bl	8001be8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f af4a 	bne.w	8001f54 <LL_GPIO_Init+0xd4>
  }
  return (SUCCESS);
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000800 	.word	0x48000800
 80020d4:	48000c00 	.word	0x48000c00
 80020d8:	48001000 	.word	0x48001000
 80020dc:	48001400 	.word	0x48001400
 80020e0:	48001800 	.word	0x48001800
 80020e4:	08002e68 	.word	0x08002e68

080020e8 <sinf>:
 80020e8:	ee10 3a10 	vmov	r3, s0
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <sinf+0x6c>)
 80020ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020f2:	4293      	cmp	r3, r2
 80020f4:	dd1c      	ble.n	8002130 <sinf+0x48>
 80020f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80020fa:	db02      	blt.n	8002102 <sinf+0x1a>
 80020fc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002100:	4770      	bx	lr
 8002102:	b500      	push	{lr}
 8002104:	b083      	sub	sp, #12
 8002106:	4668      	mov	r0, sp
 8002108:	f000 f828 	bl	800215c <__ieee754_rem_pio2f>
 800210c:	f000 0003 	and.w	r0, r0, #3
 8002110:	2801      	cmp	r0, #1
 8002112:	eddd 0a01 	vldr	s1, [sp, #4]
 8002116:	ed9d 0a00 	vldr	s0, [sp]
 800211a:	d00e      	beq.n	800213a <sinf+0x52>
 800211c:	2802      	cmp	r0, #2
 800211e:	d013      	beq.n	8002148 <sinf+0x60>
 8002120:	b170      	cbz	r0, 8002140 <sinf+0x58>
 8002122:	f000 f94d 	bl	80023c0 <__kernel_cosf>
 8002126:	eeb1 0a40 	vneg.f32	s0, s0
 800212a:	b003      	add	sp, #12
 800212c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002130:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002158 <sinf+0x70>
 8002134:	2000      	movs	r0, #0
 8002136:	f000 bcff 	b.w	8002b38 <__kernel_sinf>
 800213a:	f000 f941 	bl	80023c0 <__kernel_cosf>
 800213e:	e7f4      	b.n	800212a <sinf+0x42>
 8002140:	2001      	movs	r0, #1
 8002142:	f000 fcf9 	bl	8002b38 <__kernel_sinf>
 8002146:	e7f0      	b.n	800212a <sinf+0x42>
 8002148:	2001      	movs	r0, #1
 800214a:	f000 fcf5 	bl	8002b38 <__kernel_sinf>
 800214e:	eeb1 0a40 	vneg.f32	s0, s0
 8002152:	e7ea      	b.n	800212a <sinf+0x42>
 8002154:	3f490fd8 	.word	0x3f490fd8
 8002158:	00000000 	.word	0x00000000

0800215c <__ieee754_rem_pio2f>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	ee10 3a10 	vmov	r3, s0
 8002162:	4a89      	ldr	r2, [pc, #548]	; (8002388 <__ieee754_rem_pio2f+0x22c>)
 8002164:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002168:	4294      	cmp	r4, r2
 800216a:	b086      	sub	sp, #24
 800216c:	4605      	mov	r5, r0
 800216e:	dd70      	ble.n	8002252 <__ieee754_rem_pio2f+0xf6>
 8002170:	4a86      	ldr	r2, [pc, #536]	; (800238c <__ieee754_rem_pio2f+0x230>)
 8002172:	4294      	cmp	r4, r2
 8002174:	ee10 6a10 	vmov	r6, s0
 8002178:	dc22      	bgt.n	80021c0 <__ieee754_rem_pio2f+0x64>
 800217a:	2b00      	cmp	r3, #0
 800217c:	eddf 7a84 	vldr	s15, [pc, #528]	; 8002390 <__ieee754_rem_pio2f+0x234>
 8002180:	4a84      	ldr	r2, [pc, #528]	; (8002394 <__ieee754_rem_pio2f+0x238>)
 8002182:	f024 040f 	bic.w	r4, r4, #15
 8002186:	eeb0 7a40 	vmov.f32	s14, s0
 800218a:	f340 80e4 	ble.w	8002356 <__ieee754_rem_pio2f+0x1fa>
 800218e:	4294      	cmp	r4, r2
 8002190:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002194:	bf09      	itett	eq
 8002196:	eddf 6a80 	vldreq	s13, [pc, #512]	; 8002398 <__ieee754_rem_pio2f+0x23c>
 800219a:	ed9f 7a80 	vldrne	s14, [pc, #512]	; 800239c <__ieee754_rem_pio2f+0x240>
 800219e:	ed9f 7a80 	vldreq	s14, [pc, #512]	; 80023a0 <__ieee754_rem_pio2f+0x244>
 80021a2:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
 80021a6:	2001      	movs	r0, #1
 80021a8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80021ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80021b0:	edc5 6a00 	vstr	s13, [r5]
 80021b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021b8:	edc5 7a01 	vstr	s15, [r5, #4]
 80021bc:	b006      	add	sp, #24
 80021be:	bd70      	pop	{r4, r5, r6, pc}
 80021c0:	4a78      	ldr	r2, [pc, #480]	; (80023a4 <__ieee754_rem_pio2f+0x248>)
 80021c2:	4294      	cmp	r4, r2
 80021c4:	dd54      	ble.n	8002270 <__ieee754_rem_pio2f+0x114>
 80021c6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80021ca:	da49      	bge.n	8002260 <__ieee754_rem_pio2f+0x104>
 80021cc:	15e2      	asrs	r2, r4, #23
 80021ce:	3a86      	subs	r2, #134	; 0x86
 80021d0:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80021dc:	eddf 6a72 	vldr	s13, [pc, #456]	; 80023a8 <__ieee754_rem_pio2f+0x24c>
 80021e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80021ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80021f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80021f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021fc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002204:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	edcd 7a05 	vstr	s15, [sp, #20]
 8002210:	f040 8090 	bne.w	8002334 <__ieee754_rem_pio2f+0x1d8>
 8002214:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	bf14      	ite	ne
 800221e:	2302      	movne	r3, #2
 8002220:	2301      	moveq	r3, #1
 8002222:	4962      	ldr	r1, [pc, #392]	; (80023ac <__ieee754_rem_pio2f+0x250>)
 8002224:	9101      	str	r1, [sp, #4]
 8002226:	2102      	movs	r1, #2
 8002228:	9100      	str	r1, [sp, #0]
 800222a:	a803      	add	r0, sp, #12
 800222c:	4629      	mov	r1, r5
 800222e:	f000 f949 	bl	80024c4 <__kernel_rem_pio2f>
 8002232:	2e00      	cmp	r6, #0
 8002234:	dac2      	bge.n	80021bc <__ieee754_rem_pio2f+0x60>
 8002236:	ed95 7a00 	vldr	s14, [r5]
 800223a:	edd5 7a01 	vldr	s15, [r5, #4]
 800223e:	eeb1 7a47 	vneg.f32	s14, s14
 8002242:	eef1 7a67 	vneg.f32	s15, s15
 8002246:	ed85 7a00 	vstr	s14, [r5]
 800224a:	edc5 7a01 	vstr	s15, [r5, #4]
 800224e:	4240      	negs	r0, r0
 8002250:	e7b4      	b.n	80021bc <__ieee754_rem_pio2f+0x60>
 8002252:	2200      	movs	r2, #0
 8002254:	ed85 0a00 	vstr	s0, [r5]
 8002258:	6042      	str	r2, [r0, #4]
 800225a:	2000      	movs	r0, #0
 800225c:	b006      	add	sp, #24
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002264:	2000      	movs	r0, #0
 8002266:	edc5 7a01 	vstr	s15, [r5, #4]
 800226a:	edc5 7a00 	vstr	s15, [r5]
 800226e:	e7a5      	b.n	80021bc <__ieee754_rem_pio2f+0x60>
 8002270:	f000 fcaa 	bl	8002bc8 <fabsf>
 8002274:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80023b0 <__ieee754_rem_pio2f+0x254>
 8002278:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8002390 <__ieee754_rem_pio2f+0x234>
 800227c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002280:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002284:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800239c <__ieee754_rem_pio2f+0x240>
 8002288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800228c:	ee17 0a90 	vmov	r0, s15
 8002290:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002294:	281f      	cmp	r0, #31
 8002296:	eea6 0ac6 	vfms.f32	s0, s13, s12
 800229a:	ee66 7a87 	vmul.f32	s15, s13, s14
 800229e:	eeb1 6a66 	vneg.f32	s12, s13
 80022a2:	dc1e      	bgt.n	80022e2 <__ieee754_rem_pio2f+0x186>
 80022a4:	4a43      	ldr	r2, [pc, #268]	; (80023b4 <__ieee754_rem_pio2f+0x258>)
 80022a6:	1e41      	subs	r1, r0, #1
 80022a8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 80022ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d016      	beq.n	80022e2 <__ieee754_rem_pio2f+0x186>
 80022b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80022b8:	ed85 7a00 	vstr	s14, [r5]
 80022bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80022c0:	2e00      	cmp	r6, #0
 80022c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80022c6:	ed85 0a01 	vstr	s0, [r5, #4]
 80022ca:	f6bf af77 	bge.w	80021bc <__ieee754_rem_pio2f+0x60>
 80022ce:	eeb1 7a47 	vneg.f32	s14, s14
 80022d2:	eeb1 0a40 	vneg.f32	s0, s0
 80022d6:	ed85 7a00 	vstr	s14, [r5]
 80022da:	ed85 0a01 	vstr	s0, [r5, #4]
 80022de:	4240      	negs	r0, r0
 80022e0:	e76c      	b.n	80021bc <__ieee754_rem_pio2f+0x60>
 80022e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80022e6:	15e2      	asrs	r2, r4, #23
 80022e8:	ee17 3a10 	vmov	r3, s14
 80022ec:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80022f0:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
 80022f4:	2c08      	cmp	r4, #8
 80022f6:	dddf      	ble.n	80022b8 <__ieee754_rem_pio2f+0x15c>
 80022f8:	eddf 7a27 	vldr	s15, [pc, #156]	; 8002398 <__ieee754_rem_pio2f+0x23c>
 80022fc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80023a0 <__ieee754_rem_pio2f+0x244>
 8002300:	eef0 5a40 	vmov.f32	s11, s0
 8002304:	eee6 5a27 	vfma.f32	s11, s12, s15
 8002308:	ee30 0a65 	vsub.f32	s0, s0, s11
 800230c:	eea6 0a27 	vfma.f32	s0, s12, s15
 8002310:	eef0 7a40 	vmov.f32	s15, s0
 8002314:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8002318:	ee35 7ae7 	vsub.f32	s14, s11, s15
 800231c:	ee17 3a10 	vmov	r3, s14
 8002320:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	2a19      	cmp	r2, #25
 8002328:	dc06      	bgt.n	8002338 <__ieee754_rem_pio2f+0x1dc>
 800232a:	eeb0 0a65 	vmov.f32	s0, s11
 800232e:	ed85 7a00 	vstr	s14, [r5]
 8002332:	e7c3      	b.n	80022bc <__ieee754_rem_pio2f+0x160>
 8002334:	2303      	movs	r3, #3
 8002336:	e774      	b.n	8002222 <__ieee754_rem_pio2f+0xc6>
 8002338:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80023b8 <__ieee754_rem_pio2f+0x25c>
 800233c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80023bc <__ieee754_rem_pio2f+0x260>
 8002340:	eeb0 0a65 	vmov.f32	s0, s11
 8002344:	eea6 0a07 	vfma.f32	s0, s12, s14
 8002348:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800234c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002350:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8002354:	e7ae      	b.n	80022b4 <__ieee754_rem_pio2f+0x158>
 8002356:	4294      	cmp	r4, r2
 8002358:	ee70 7a27 	vadd.f32	s15, s0, s15
 800235c:	bf09      	itett	eq
 800235e:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8002398 <__ieee754_rem_pio2f+0x23c>
 8002362:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 800239c <__ieee754_rem_pio2f+0x240>
 8002366:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 80023a0 <__ieee754_rem_pio2f+0x244>
 800236a:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
 800236e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002372:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002376:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800237a:	edc5 6a00 	vstr	s13, [r5]
 800237e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002382:	edc5 7a01 	vstr	s15, [r5, #4]
 8002386:	e719      	b.n	80021bc <__ieee754_rem_pio2f+0x60>
 8002388:	3f490fd8 	.word	0x3f490fd8
 800238c:	4016cbe3 	.word	0x4016cbe3
 8002390:	3fc90f80 	.word	0x3fc90f80
 8002394:	3fc90fd0 	.word	0x3fc90fd0
 8002398:	37354400 	.word	0x37354400
 800239c:	37354443 	.word	0x37354443
 80023a0:	2e85a308 	.word	0x2e85a308
 80023a4:	43490f80 	.word	0x43490f80
 80023a8:	43800000 	.word	0x43800000
 80023ac:	08002f30 	.word	0x08002f30
 80023b0:	3f22f984 	.word	0x3f22f984
 80023b4:	08002eb0 	.word	0x08002eb0
 80023b8:	2e85a300 	.word	0x2e85a300
 80023bc:	248d3132 	.word	0x248d3132

080023c0 <__kernel_cosf>:
 80023c0:	ee10 3a10 	vmov	r3, s0
 80023c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80023cc:	da2c      	bge.n	8002428 <__kernel_cosf+0x68>
 80023ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80023d2:	ee17 3a90 	vmov	r3, s15
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d060      	beq.n	800249c <__kernel_cosf+0xdc>
 80023da:	ee20 7a00 	vmul.f32	s14, s0, s0
 80023de:	eddf 7a31 	vldr	s15, [pc, #196]	; 80024a4 <__kernel_cosf+0xe4>
 80023e2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80024a8 <__kernel_cosf+0xe8>
 80023e6:	eddf 5a31 	vldr	s11, [pc, #196]	; 80024ac <__kernel_cosf+0xec>
 80023ea:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80024b0 <__kernel_cosf+0xf0>
 80023ee:	eddf 6a31 	vldr	s13, [pc, #196]	; 80024b4 <__kernel_cosf+0xf4>
 80023f2:	eea7 5a27 	vfma.f32	s10, s14, s15
 80023f6:	eddf 7a30 	vldr	s15, [pc, #192]	; 80024b8 <__kernel_cosf+0xf8>
 80023fa:	eee7 5a05 	vfma.f32	s11, s14, s10
 80023fe:	eea7 6a25 	vfma.f32	s12, s14, s11
 8002402:	eee7 7a06 	vfma.f32	s15, s14, s12
 8002406:	eee7 6a27 	vfma.f32	s13, s14, s15
 800240a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800240e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002412:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002416:	eee7 0a26 	vfma.f32	s1, s14, s13
 800241a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800241e:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002422:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002426:	4770      	bx	lr
 8002428:	ee20 7a00 	vmul.f32	s14, s0, s0
 800242c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80024a4 <__kernel_cosf+0xe4>
 8002430:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80024a8 <__kernel_cosf+0xe8>
 8002434:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024ac <__kernel_cosf+0xec>
 8002438:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80024b0 <__kernel_cosf+0xf0>
 800243c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80024b4 <__kernel_cosf+0xf4>
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <__kernel_cosf+0xfc>)
 8002442:	eea7 5a27 	vfma.f32	s10, s14, s15
 8002446:	4293      	cmp	r3, r2
 8002448:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80024b8 <__kernel_cosf+0xf8>
 800244c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8002450:	eea5 6a87 	vfma.f32	s12, s11, s14
 8002454:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002458:	eee7 6a87 	vfma.f32	s13, s15, s14
 800245c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002460:	ddd5      	ble.n	800240e <__kernel_cosf+0x4e>
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <__kernel_cosf+0x100>)
 8002464:	4293      	cmp	r3, r2
 8002466:	dc14      	bgt.n	8002492 <__kernel_cosf+0xd2>
 8002468:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002474:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002478:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800247c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002480:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002484:	eee7 0a26 	vfma.f32	s1, s14, s13
 8002488:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800248c:	ee36 0a60 	vsub.f32	s0, s12, s1
 8002490:	4770      	bx	lr
 8002492:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8002496:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 800249a:	e7ed      	b.n	8002478 <__kernel_cosf+0xb8>
 800249c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	ad47d74e 	.word	0xad47d74e
 80024a8:	310f74f6 	.word	0x310f74f6
 80024ac:	b493f27c 	.word	0xb493f27c
 80024b0:	37d00d01 	.word	0x37d00d01
 80024b4:	3d2aaaab 	.word	0x3d2aaaab
 80024b8:	bab60b61 	.word	0xbab60b61
 80024bc:	3e999999 	.word	0x3e999999
 80024c0:	3f480000 	.word	0x3f480000

080024c4 <__kernel_rem_pio2f>:
 80024c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c8:	ed2d 8b04 	vpush	{d8-d9}
 80024cc:	b0db      	sub	sp, #364	; 0x16c
 80024ce:	461c      	mov	r4, r3
 80024d0:	9303      	str	r3, [sp, #12]
 80024d2:	9106      	str	r1, [sp, #24]
 80024d4:	4ba2      	ldr	r3, [pc, #648]	; (8002760 <__kernel_rem_pio2f+0x29c>)
 80024d6:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 80024d8:	9208      	str	r2, [sp, #32]
 80024da:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80024de:	1d11      	adds	r1, r2, #4
 80024e0:	4682      	mov	sl, r0
 80024e2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 80024e6:	f2c0 82a3 	blt.w	8002a30 <__kernel_rem_pio2f+0x56c>
 80024ea:	1ed3      	subs	r3, r2, #3
 80024ec:	bf48      	it	mi
 80024ee:	1d13      	addmi	r3, r2, #4
 80024f0:	10db      	asrs	r3, r3, #3
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	9307      	str	r3, [sp, #28]
 80024fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	9b02      	ldr	r3, [sp, #8]
 8002504:	eb15 0108 	adds.w	r1, r5, r8
 8002508:	eba3 0308 	sub.w	r3, r3, r8
 800250c:	d416      	bmi.n	800253c <__kernel_rem_pio2f+0x78>
 800250e:	3101      	adds	r1, #1
 8002510:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002764 <__kernel_rem_pio2f+0x2a0>
 8002514:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8002516:	4419      	add	r1, r3
 8002518:	aa1e      	add	r2, sp, #120	; 0x78
 800251a:	2b00      	cmp	r3, #0
 800251c:	bfa4      	itt	ge
 800251e:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8002522:	ee07 4a90 	vmovge	s15, r4
 8002526:	f103 0301 	add.w	r3, r3, #1
 800252a:	bfac      	ite	ge
 800252c:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8002530:	eef0 7a47 	vmovlt.f32	s15, s14
 8002534:	428b      	cmp	r3, r1
 8002536:	ece2 7a01 	vstmia	r2!, {s15}
 800253a:	d1ee      	bne.n	800251a <__kernel_rem_pio2f+0x56>
 800253c:	2d00      	cmp	r5, #0
 800253e:	f2c0 82e7 	blt.w	8002b10 <__kernel_rem_pio2f+0x64c>
 8002542:	9b03      	ldr	r3, [sp, #12]
 8002544:	aa1e      	add	r2, sp, #120	; 0x78
 8002546:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 800254a:	ae46      	add	r6, sp, #280	; 0x118
 800254c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8002550:	4640      	mov	r0, r8
 8002552:	18ef      	adds	r7, r5, r3
 8002554:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 8002558:	f1b8 0f00 	cmp.w	r8, #0
 800255c:	eddf 7a81 	vldr	s15, [pc, #516]	; 8002764 <__kernel_rem_pio2f+0x2a0>
 8002560:	db09      	blt.n	8002576 <__kernel_rem_pio2f+0xb2>
 8002562:	4622      	mov	r2, r4
 8002564:	4653      	mov	r3, sl
 8002566:	ecf3 6a01 	vldmia	r3!, {s13}
 800256a:	ed32 7a01 	vldmdb	r2!, {s14}
 800256e:	428b      	cmp	r3, r1
 8002570:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002574:	d1f7      	bne.n	8002566 <__kernel_rem_pio2f+0xa2>
 8002576:	3001      	adds	r0, #1
 8002578:	42b8      	cmp	r0, r7
 800257a:	ece6 7a01 	vstmia	r6!, {s15}
 800257e:	f104 0404 	add.w	r4, r4, #4
 8002582:	d1e9      	bne.n	8002558 <__kernel_rem_pio2f+0x94>
 8002584:	ab09      	add	r3, sp, #36	; 0x24
 8002586:	af0a      	add	r7, sp, #40	; 0x28
 8002588:	eb03 0985 	add.w	r9, r3, r5, lsl #2
 800258c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8002590:	3b08      	subs	r3, #8
 8002592:	ed9f 9a76 	vldr	s18, [pc, #472]	; 800276c <__kernel_rem_pio2f+0x2a8>
 8002596:	eddf 8a74 	vldr	s17, [pc, #464]	; 8002768 <__kernel_rem_pio2f+0x2a4>
 800259a:	9805      	ldr	r0, [sp, #20]
 800259c:	9304      	str	r3, [sp, #16]
 800259e:	eb0a 040c 	add.w	r4, sl, ip
 80025a2:	ae46      	add	r6, sp, #280	; 0x118
 80025a4:	9500      	str	r5, [sp, #0]
 80025a6:	ab5a      	add	r3, sp, #360	; 0x168
 80025a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80025b2:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 80025b6:	dd16      	ble.n	80025e6 <__kernel_rem_pio2f+0x122>
 80025b8:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80025bc:	463a      	mov	r2, r7
 80025be:	ee60 7a09 	vmul.f32	s15, s0, s18
 80025c2:	eeb0 7a40 	vmov.f32	s14, s0
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ed73 6a01 	vldmdb	r3!, {s13}
 80025ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d2:	42b3      	cmp	r3, r6
 80025d4:	eea7 7ae8 	vfms.f32	s14, s15, s17
 80025d8:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80025dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80025e0:	eca2 7a01 	vstmia	r2!, {s14}
 80025e4:	d1eb      	bne.n	80025be <__kernel_rem_pio2f+0xfa>
 80025e6:	9001      	str	r0, [sp, #4]
 80025e8:	f000 fb3c 	bl	8002c64 <scalbnf>
 80025ec:	eeb0 8a40 	vmov.f32	s16, s0
 80025f0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80025f4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80025f8:	f000 faee 	bl	8002bd8 <floorf>
 80025fc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002600:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002604:	9801      	ldr	r0, [sp, #4]
 8002606:	2800      	cmp	r0, #0
 8002608:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 800260c:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8002610:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002614:	dd79      	ble.n	800270a <__kernel_rem_pio2f+0x246>
 8002616:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 800261a:	f1c0 0308 	rsb	r3, r0, #8
 800261e:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 8002622:	fa41 fc03 	asr.w	ip, r1, r3
 8002626:	fa0c f303 	lsl.w	r3, ip, r3
 800262a:	1acb      	subs	r3, r1, r3
 800262c:	f1c0 0207 	rsb	r2, r0, #7
 8002630:	ee19 1a90 	vmov	r1, s19
 8002634:	fa43 f202 	asr.w	r2, r3, r2
 8002638:	4461      	add	r1, ip
 800263a:	2a00      	cmp	r2, #0
 800263c:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
 8002640:	ee09 1a90 	vmov	s19, r1
 8002644:	dc69      	bgt.n	800271a <__kernel_rem_pio2f+0x256>
 8002646:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	f040 80c0 	bne.w	80027d2 <__kernel_rem_pio2f+0x30e>
 8002652:	9b00      	ldr	r3, [sp, #0]
 8002654:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8002658:	455b      	cmp	r3, fp
 800265a:	dc10      	bgt.n	800267e <__kernel_rem_pio2f+0x1ba>
 800265c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8002660:	3b01      	subs	r3, #1
 8002662:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002666:	2100      	movs	r1, #0
 8002668:	4694      	mov	ip, r2
 800266a:	f853 2904 	ldr.w	r2, [r3], #-4
 800266e:	454b      	cmp	r3, r9
 8002670:	ea41 0102 	orr.w	r1, r1, r2
 8002674:	d1f9      	bne.n	800266a <__kernel_rem_pio2f+0x1a6>
 8002676:	4662      	mov	r2, ip
 8002678:	2900      	cmp	r1, #0
 800267a:	f040 80f2 	bne.w	8002862 <__kernel_rem_pio2f+0x39e>
 800267e:	9b00      	ldr	r3, [sp, #0]
 8002680:	3b01      	subs	r3, #1
 8002682:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80e7 	bne.w	800285a <__kernel_rem_pio2f+0x396>
 800268c:	9b04      	ldr	r3, [sp, #16]
 800268e:	f04f 0c01 	mov.w	ip, #1
 8002692:	f853 2904 	ldr.w	r2, [r3], #-4
 8002696:	f10c 0c01 	add.w	ip, ip, #1
 800269a:	2a00      	cmp	r2, #0
 800269c:	d0f9      	beq.n	8002692 <__kernel_rem_pio2f+0x1ce>
 800269e:	1c6b      	adds	r3, r5, #1
 80026a0:	44ac      	add	ip, r5
 80026a2:	469e      	mov	lr, r3
 80026a4:	9a03      	ldr	r2, [sp, #12]
 80026a6:	1951      	adds	r1, r2, r5
 80026a8:	9a02      	ldr	r2, [sp, #8]
 80026aa:	eb02 0b03 	add.w	fp, r2, r3
 80026ae:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 80026b2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80026b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80026b8:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80026bc:	ab1e      	add	r3, sp, #120	; 0x78
 80026be:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80026c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80026c6:	eddb 7a01 	vldr	s15, [fp, #4]
 80026ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002764 <__kernel_rem_pio2f+0x2a0>
 80026ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d2:	f1b8 0f00 	cmp.w	r8, #0
 80026d6:	f10b 0b04 	add.w	fp, fp, #4
 80026da:	edc1 7a00 	vstr	s15, [r1]
 80026de:	460a      	mov	r2, r1
 80026e0:	f101 0104 	add.w	r1, r1, #4
 80026e4:	db09      	blt.n	80026fa <__kernel_rem_pio2f+0x236>
 80026e6:	4653      	mov	r3, sl
 80026e8:	e001      	b.n	80026ee <__kernel_rem_pio2f+0x22a>
 80026ea:	ed72 7a01 	vldmdb	r2!, {s15}
 80026ee:	ecf3 6a01 	vldmia	r3!, {s13}
 80026f2:	42a3      	cmp	r3, r4
 80026f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80026f8:	d1f7      	bne.n	80026ea <__kernel_rem_pio2f+0x226>
 80026fa:	f10e 0e01 	add.w	lr, lr, #1
 80026fe:	45e6      	cmp	lr, ip
 8002700:	eca5 7a01 	vstmia	r5!, {s14}
 8002704:	dddf      	ble.n	80026c6 <__kernel_rem_pio2f+0x202>
 8002706:	4665      	mov	r5, ip
 8002708:	e74d      	b.n	80025a6 <__kernel_rem_pio2f+0xe2>
 800270a:	f040 809c 	bne.w	8002846 <__kernel_rem_pio2f+0x382>
 800270e:	1e6b      	subs	r3, r5, #1
 8002710:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8002714:	11d2      	asrs	r2, r2, #7
 8002716:	2a00      	cmp	r2, #0
 8002718:	dd95      	ble.n	8002646 <__kernel_rem_pio2f+0x182>
 800271a:	ee19 3a90 	vmov	r3, s19
 800271e:	2d00      	cmp	r5, #0
 8002720:	f103 0301 	add.w	r3, r3, #1
 8002724:	ee09 3a90 	vmov	s19, r3
 8002728:	f340 8198 	ble.w	8002a5c <__kernel_rem_pio2f+0x598>
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	2900      	cmp	r1, #0
 8002730:	d17f      	bne.n	8002832 <__kernel_rem_pio2f+0x36e>
 8002732:	2d01      	cmp	r5, #1
 8002734:	d026      	beq.n	8002784 <__kernel_rem_pio2f+0x2c0>
 8002736:	463b      	mov	r3, r7
 8002738:	f04f 0c01 	mov.w	ip, #1
 800273c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8002740:	2900      	cmp	r1, #0
 8002742:	d07a      	beq.n	800283a <__kernel_rem_pio2f+0x376>
 8002744:	f10c 0301 	add.w	r3, ip, #1
 8002748:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800274c:	429d      	cmp	r5, r3
 800274e:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
 8002752:	dd16      	ble.n	8002782 <__kernel_rem_pio2f+0x2be>
 8002754:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8002758:	44bb      	add	fp, r7
 800275a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800275e:	e00a      	b.n	8002776 <__kernel_rem_pio2f+0x2b2>
 8002760:	08003274 	.word	0x08003274
 8002764:	00000000 	.word	0x00000000
 8002768:	43800000 	.word	0x43800000
 800276c:	3b800000 	.word	0x3b800000
 8002770:	3fc90000 	.word	0x3fc90000
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 800277a:	f843 1b04 	str.w	r1, [r3], #4
 800277e:	455b      	cmp	r3, fp
 8002780:	d1f8      	bne.n	8002774 <__kernel_rem_pio2f+0x2b0>
 8002782:	2101      	movs	r1, #1
 8002784:	2800      	cmp	r0, #0
 8002786:	dd0c      	ble.n	80027a2 <__kernel_rem_pio2f+0x2de>
 8002788:	2801      	cmp	r0, #1
 800278a:	f000 8148 	beq.w	8002a1e <__kernel_rem_pio2f+0x55a>
 800278e:	2802      	cmp	r0, #2
 8002790:	d107      	bne.n	80027a2 <__kernel_rem_pio2f+0x2de>
 8002792:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8002796:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800279a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279e:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 80027a2:	2a02      	cmp	r2, #2
 80027a4:	f47f af4f 	bne.w	8002646 <__kernel_rem_pio2f+0x182>
 80027a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 80027b0:	2900      	cmp	r1, #0
 80027b2:	f43f af48 	beq.w	8002646 <__kernel_rem_pio2f+0x182>
 80027b6:	9209      	str	r2, [sp, #36]	; 0x24
 80027b8:	9001      	str	r0, [sp, #4]
 80027ba:	f000 fa53 	bl	8002c64 <scalbnf>
 80027be:	ee38 8a40 	vsub.f32	s16, s16, s0
 80027c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027c4:	9801      	ldr	r0, [sp, #4]
 80027c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	f43f af40 	beq.w	8002652 <__kernel_rem_pio2f+0x18e>
 80027d2:	9202      	str	r2, [sp, #8]
 80027d4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80027d8:	eeb0 0a48 	vmov.f32	s0, s16
 80027dc:	1a98      	subs	r0, r3, r2
 80027de:	9501      	str	r5, [sp, #4]
 80027e0:	9d00      	ldr	r5, [sp, #0]
 80027e2:	f000 fa3f 	bl	8002c64 <scalbnf>
 80027e6:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8002768 <__kernel_rem_pio2f+0x2a4>
 80027ea:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80027f6:	f2c0 8159 	blt.w	8002aac <__kernel_rem_pio2f+0x5e8>
 80027fa:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 800276c <__kernel_rem_pio2f+0x2a8>
 80027fe:	9905      	ldr	r1, [sp, #20]
 8002800:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002804:	3108      	adds	r1, #8
 8002806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280a:	9105      	str	r1, [sp, #20]
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	f103 0b01 	add.w	fp, r3, #1
 8002814:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002820:	ee10 1a10 	vmov	r1, s0
 8002824:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8002828:	ee17 3a90 	vmov	r3, s15
 800282c:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
 8002830:	e02e      	b.n	8002890 <__kernel_rem_pio2f+0x3cc>
 8002832:	2301      	movs	r3, #1
 8002834:	f04f 0c00 	mov.w	ip, #0
 8002838:	e786      	b.n	8002748 <__kernel_rem_pio2f+0x284>
 800283a:	f10c 0c01 	add.w	ip, ip, #1
 800283e:	45ac      	cmp	ip, r5
 8002840:	f47f af7c 	bne.w	800273c <__kernel_rem_pio2f+0x278>
 8002844:	e79e      	b.n	8002784 <__kernel_rem_pio2f+0x2c0>
 8002846:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800284a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	f280 80f2 	bge.w	8002a3a <__kernel_rem_pio2f+0x576>
 8002856:	2200      	movs	r2, #0
 8002858:	e6f5      	b.n	8002646 <__kernel_rem_pio2f+0x182>
 800285a:	1c6b      	adds	r3, r5, #1
 800285c:	469e      	mov	lr, r3
 800285e:	469c      	mov	ip, r3
 8002860:	e720      	b.n	80026a4 <__kernel_rem_pio2f+0x1e0>
 8002862:	9905      	ldr	r1, [sp, #20]
 8002864:	f1a1 0008 	sub.w	r0, r1, #8
 8002868:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
 800286c:	9005      	str	r0, [sp, #20]
 800286e:	462b      	mov	r3, r5
 8002870:	9d00      	ldr	r5, [sp, #0]
 8002872:	b969      	cbnz	r1, 8002890 <__kernel_rem_pio2f+0x3cc>
 8002874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002878:	3b02      	subs	r3, #2
 800287a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800287e:	4601      	mov	r1, r0
 8002880:	f853 0904 	ldr.w	r0, [r3], #-4
 8002884:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002888:	3908      	subs	r1, #8
 800288a:	2800      	cmp	r0, #0
 800288c:	d0f8      	beq.n	8002880 <__kernel_rem_pio2f+0x3bc>
 800288e:	9105      	str	r1, [sp, #20]
 8002890:	9805      	ldr	r0, [sp, #20]
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002898:	f000 f9e4 	bl	8002c64 <scalbnf>
 800289c:	f1bb 0f00 	cmp.w	fp, #0
 80028a0:	9a00      	ldr	r2, [sp, #0]
 80028a2:	f2c0 8128 	blt.w	8002af6 <__kernel_rem_pio2f+0x632>
 80028a6:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
 80028aa:	ab46      	add	r3, sp, #280	; 0x118
 80028ac:	eb03 060e 	add.w	r6, r3, lr
 80028b0:	f10e 0c04 	add.w	ip, lr, #4
 80028b4:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 800276c <__kernel_rem_pio2f+0x2a8>
 80028b8:	eb07 030c 	add.w	r3, r7, ip
 80028bc:	1d31      	adds	r1, r6, #4
 80028be:	ed73 7a01 	vldmdb	r3!, {s15}
 80028c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c6:	42bb      	cmp	r3, r7
 80028c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80028cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80028d0:	ed61 7a01 	vstmdb	r1!, {s15}
 80028d4:	d1f3      	bne.n	80028be <__kernel_rem_pio2f+0x3fa>
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; 8002770 <__kernel_rem_pio2f+0x2ac>
 80028dc:	f04f 0400 	mov.w	r4, #0
 80028e0:	db20      	blt.n	8002924 <__kernel_rem_pio2f+0x460>
 80028e2:	4893      	ldr	r0, [pc, #588]	; (8002b30 <__kernel_rem_pio2f+0x66c>)
 80028e4:	eddf 7a93 	vldr	s15, [pc, #588]	; 8002b34 <__kernel_rem_pio2f+0x670>
 80028e8:	eeb0 7a46 	vmov.f32	s14, s12
 80028ec:	4631      	mov	r1, r6
 80028ee:	2300      	movs	r3, #0
 80028f0:	e003      	b.n	80028fa <__kernel_rem_pio2f+0x436>
 80028f2:	429c      	cmp	r4, r3
 80028f4:	db08      	blt.n	8002908 <__kernel_rem_pio2f+0x444>
 80028f6:	ecb0 7a01 	vldmia	r0!, {s14}
 80028fa:	ecf1 6a01 	vldmia	r1!, {s13}
 80028fe:	3301      	adds	r3, #1
 8002900:	429d      	cmp	r5, r3
 8002902:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002906:	daf4      	bge.n	80028f2 <__kernel_rem_pio2f+0x42e>
 8002908:	ab5a      	add	r3, sp, #360	; 0x168
 800290a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800290e:	45a3      	cmp	fp, r4
 8002910:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
 8002914:	f1a6 0604 	sub.w	r6, r6, #4
 8002918:	f104 0301 	add.w	r3, r4, #1
 800291c:	d005      	beq.n	800292a <__kernel_rem_pio2f+0x466>
 800291e:	2d00      	cmp	r5, #0
 8002920:	461c      	mov	r4, r3
 8002922:	dade      	bge.n	80028e2 <__kernel_rem_pio2f+0x41e>
 8002924:	eddf 7a83 	vldr	s15, [pc, #524]	; 8002b34 <__kernel_rem_pio2f+0x670>
 8002928:	e7ee      	b.n	8002908 <__kernel_rem_pio2f+0x444>
 800292a:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 800292c:	2902      	cmp	r1, #2
 800292e:	dc1c      	bgt.n	800296a <__kernel_rem_pio2f+0x4a6>
 8002930:	2900      	cmp	r1, #0
 8002932:	f300 8095 	bgt.w	8002a60 <__kernel_rem_pio2f+0x59c>
 8002936:	d10f      	bne.n	8002958 <__kernel_rem_pio2f+0x494>
 8002938:	ab32      	add	r3, sp, #200	; 0xc8
 800293a:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8002b34 <__kernel_rem_pio2f+0x670>
 800293e:	449c      	add	ip, r3
 8002940:	ed3c 7a01 	vldmdb	ip!, {s14}
 8002944:	4563      	cmp	r3, ip
 8002946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800294a:	d1f9      	bne.n	8002940 <__kernel_rem_pio2f+0x47c>
 800294c:	b10a      	cbz	r2, 8002952 <__kernel_rem_pio2f+0x48e>
 800294e:	eef1 7a67 	vneg.f32	s15, s15
 8002952:	9b06      	ldr	r3, [sp, #24]
 8002954:	edc3 7a00 	vstr	s15, [r3]
 8002958:	ee19 3a90 	vmov	r3, s19
 800295c:	f003 0007 	and.w	r0, r3, #7
 8002960:	b05b      	add	sp, #364	; 0x16c
 8002962:	ecbd 8b04 	vpop	{d8-d9}
 8002966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800296c:	2b03      	cmp	r3, #3
 800296e:	d1f3      	bne.n	8002958 <__kernel_rem_pio2f+0x494>
 8002970:	f1bb 0f00 	cmp.w	fp, #0
 8002974:	f000 80d4 	beq.w	8002b20 <__kernel_rem_pio2f+0x65c>
 8002978:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 800297c:	446b      	add	r3, sp
 800297e:	a932      	add	r1, sp, #200	; 0xc8
 8002980:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
 8002984:	eb01 038b 	add.w	r3, r1, fp, lsl #2
 8002988:	ed73 7a01 	vldmdb	r3!, {s15}
 800298c:	eef0 6a47 	vmov.f32	s13, s14
 8002990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002994:	4299      	cmp	r1, r3
 8002996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800299a:	ed83 7a00 	vstr	s14, [r3]
 800299e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a2:	edc3 7a01 	vstr	s15, [r3, #4]
 80029a6:	d1ef      	bne.n	8002988 <__kernel_rem_pio2f+0x4c4>
 80029a8:	f1bb 0f01 	cmp.w	fp, #1
 80029ac:	f340 80b8 	ble.w	8002b20 <__kernel_rem_pio2f+0x65c>
 80029b0:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
 80029b4:	f50e 73b4 	add.w	r3, lr, #360	; 0x168
 80029b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80029bc:	eb0d 0e03 	add.w	lr, sp, r3
 80029c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80029c4:	f10b 0304 	add.w	r3, fp, #4
 80029c8:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
 80029cc:	440b      	add	r3, r1
 80029ce:	a833      	add	r0, sp, #204	; 0xcc
 80029d0:	ed73 7a01 	vldmdb	r3!, {s15}
 80029d4:	eef0 6a47 	vmov.f32	s13, s14
 80029d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029dc:	4298      	cmp	r0, r3
 80029de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e2:	ed83 7a00 	vstr	s14, [r3]
 80029e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ea:	edc3 7a01 	vstr	s15, [r3, #4]
 80029ee:	d1ef      	bne.n	80029d0 <__kernel_rem_pio2f+0x50c>
 80029f0:	f10b 0b08 	add.w	fp, fp, #8
 80029f4:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8002b34 <__kernel_rem_pio2f+0x670>
 80029f8:	eb01 030b 	add.w	r3, r1, fp
 80029fc:	3108      	adds	r1, #8
 80029fe:	ed33 7a01 	vldmdb	r3!, {s14}
 8002a02:	4299      	cmp	r1, r3
 8002a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a08:	d1f9      	bne.n	80029fe <__kernel_rem_pio2f+0x53a>
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d156      	bne.n	8002abc <__kernel_rem_pio2f+0x5f8>
 8002a0e:	9906      	ldr	r1, [sp, #24]
 8002a10:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8002a12:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8002a14:	600a      	str	r2, [r1, #0]
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	edc1 7a02 	vstr	s15, [r1, #8]
 8002a1c:	e79c      	b.n	8002958 <__kernel_rem_pio2f+0x494>
 8002a1e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8002a22:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8002a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
 8002a2e:	e6b8      	b.n	80027a2 <__kernel_rem_pio2f+0x2de>
 8002a30:	2308      	movs	r3, #8
 8002a32:	9307      	str	r3, [sp, #28]
 8002a34:	2300      	movs	r3, #0
 8002a36:	9302      	str	r3, [sp, #8]
 8002a38:	e55f      	b.n	80024fa <__kernel_rem_pio2f+0x36>
 8002a3a:	ee19 3a90 	vmov	r3, s19
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	f103 0301 	add.w	r3, r3, #1
 8002a44:	ee09 3a90 	vmov	s19, r3
 8002a48:	bfc8      	it	gt
 8002a4a:	2202      	movgt	r2, #2
 8002a4c:	f73f ae6e 	bgt.w	800272c <__kernel_rem_pio2f+0x268>
 8002a50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a54:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002a58:	2202      	movs	r2, #2
 8002a5a:	e5f4      	b.n	8002646 <__kernel_rem_pio2f+0x182>
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	e691      	b.n	8002784 <__kernel_rem_pio2f+0x2c0>
 8002a60:	a932      	add	r1, sp, #200	; 0xc8
 8002a62:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002b34 <__kernel_rem_pio2f+0x670>
 8002a66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002a6a:	ed33 7a01 	vldmdb	r3!, {s14}
 8002a6e:	4299      	cmp	r1, r3
 8002a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a74:	d1f9      	bne.n	8002a6a <__kernel_rem_pio2f+0x5a6>
 8002a76:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8002a7a:	bb8a      	cbnz	r2, 8002ae0 <__kernel_rem_pio2f+0x61c>
 8002a7c:	9b06      	ldr	r3, [sp, #24]
 8002a7e:	f1bb 0f00 	cmp.w	fp, #0
 8002a82:	edc3 7a00 	vstr	s15, [r3]
 8002a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8a:	dd0b      	ble.n	8002aa4 <__kernel_rem_pio2f+0x5e0>
 8002a8c:	a933      	add	r1, sp, #204	; 0xcc
 8002a8e:	2301      	movs	r3, #1
 8002a90:	ecb1 7a01 	vldmia	r1!, {s14}
 8002a94:	3301      	adds	r3, #1
 8002a96:	459b      	cmp	fp, r3
 8002a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9c:	daf8      	bge.n	8002a90 <__kernel_rem_pio2f+0x5cc>
 8002a9e:	b10a      	cbz	r2, 8002aa4 <__kernel_rem_pio2f+0x5e0>
 8002aa0:	eef1 7a67 	vneg.f32	s15, s15
 8002aa4:	9b06      	ldr	r3, [sp, #24]
 8002aa6:	edc3 7a01 	vstr	s15, [r3, #4]
 8002aaa:	e755      	b.n	8002958 <__kernel_rem_pio2f+0x494>
 8002aac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002ab0:	469b      	mov	fp, r3
 8002ab2:	ee10 1a10 	vmov	r1, s0
 8002ab6:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8002aba:	e6e9      	b.n	8002890 <__kernel_rem_pio2f+0x3cc>
 8002abc:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002ac0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8002ac4:	9b06      	ldr	r3, [sp, #24]
 8002ac6:	eef1 6a66 	vneg.f32	s13, s13
 8002aca:	eeb1 7a47 	vneg.f32	s14, s14
 8002ace:	eef1 7a67 	vneg.f32	s15, s15
 8002ad2:	edc3 6a00 	vstr	s13, [r3]
 8002ad6:	ed83 7a01 	vstr	s14, [r3, #4]
 8002ada:	edc3 7a02 	vstr	s15, [r3, #8]
 8002ade:	e73b      	b.n	8002958 <__kernel_rem_pio2f+0x494>
 8002ae0:	9b06      	ldr	r3, [sp, #24]
 8002ae2:	eef1 6a67 	vneg.f32	s13, s15
 8002ae6:	f1bb 0f00 	cmp.w	fp, #0
 8002aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aee:	edc3 6a00 	vstr	s13, [r3]
 8002af2:	dccb      	bgt.n	8002a8c <__kernel_rem_pio2f+0x5c8>
 8002af4:	e7d4      	b.n	8002aa0 <__kernel_rem_pio2f+0x5dc>
 8002af6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	dc0d      	bgt.n	8002b18 <__kernel_rem_pio2f+0x654>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	dc14      	bgt.n	8002b2a <__kernel_rem_pio2f+0x666>
 8002b00:	f47f af2a 	bne.w	8002958 <__kernel_rem_pio2f+0x494>
 8002b04:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002b34 <__kernel_rem_pio2f+0x670>
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	f43f af22 	beq.w	8002952 <__kernel_rem_pio2f+0x48e>
 8002b0e:	e71e      	b.n	800294e <__kernel_rem_pio2f+0x48a>
 8002b10:	9b03      	ldr	r3, [sp, #12]
 8002b12:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8002b16:	e535      	b.n	8002584 <__kernel_rem_pio2f+0xc0>
 8002b18:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	f47f af1c 	bne.w	8002958 <__kernel_rem_pio2f+0x494>
 8002b20:	eddf 7a04 	vldr	s15, [pc, #16]	; 8002b34 <__kernel_rem_pio2f+0x670>
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d1c9      	bne.n	8002abc <__kernel_rem_pio2f+0x5f8>
 8002b28:	e771      	b.n	8002a0e <__kernel_rem_pio2f+0x54a>
 8002b2a:	eddf 7a02 	vldr	s15, [pc, #8]	; 8002b34 <__kernel_rem_pio2f+0x670>
 8002b2e:	e7a2      	b.n	8002a76 <__kernel_rem_pio2f+0x5b2>
 8002b30:	0800324c 	.word	0x0800324c
 8002b34:	00000000 	.word	0x00000000

08002b38 <__kernel_sinf>:
 8002b38:	ee10 3a10 	vmov	r3, s0
 8002b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b40:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002b44:	da04      	bge.n	8002b50 <__kernel_sinf+0x18>
 8002b46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002b4a:	ee17 3a90 	vmov	r3, s15
 8002b4e:	b35b      	cbz	r3, 8002ba8 <__kernel_sinf+0x70>
 8002b50:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002b54:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002bac <__kernel_sinf+0x74>
 8002b58:	eddf 5a15 	vldr	s11, [pc, #84]	; 8002bb0 <__kernel_sinf+0x78>
 8002b5c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002bb4 <__kernel_sinf+0x7c>
 8002b60:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002bb8 <__kernel_sinf+0x80>
 8002b64:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002b68:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002bbc <__kernel_sinf+0x84>
 8002b6c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8002b70:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002b74:	eee6 6a27 	vfma.f32	s13, s12, s15
 8002b78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002b7c:	b930      	cbnz	r0, 8002b8c <__kernel_sinf+0x54>
 8002b7e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002bc0 <__kernel_sinf+0x88>
 8002b82:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002b86:	eea6 0a85 	vfma.f32	s0, s13, s10
 8002b8a:	4770      	bx	lr
 8002b8c:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8002b90:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b94:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8002b98:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002bc4 <__kernel_sinf+0x8c>
 8002b9c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002ba0:	eee5 0a26 	vfma.f32	s1, s10, s13
 8002ba4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	2f2ec9d3 	.word	0x2f2ec9d3
 8002bb0:	b2d72f34 	.word	0xb2d72f34
 8002bb4:	3638ef1b 	.word	0x3638ef1b
 8002bb8:	b9500d01 	.word	0xb9500d01
 8002bbc:	3c088889 	.word	0x3c088889
 8002bc0:	be2aaaab 	.word	0xbe2aaaab
 8002bc4:	3e2aaaab 	.word	0x3e2aaaab

08002bc8 <fabsf>:
 8002bc8:	ee10 3a10 	vmov	r3, s0
 8002bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bd0:	ee00 3a10 	vmov	s0, r3
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <floorf>:
 8002bd8:	ee10 2a10 	vmov	r2, s0
 8002bdc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8002be0:	3b7f      	subs	r3, #127	; 0x7f
 8002be2:	2b16      	cmp	r3, #22
 8002be4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002be8:	dc28      	bgt.n	8002c3c <floorf+0x64>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db18      	blt.n	8002c20 <floorf+0x48>
 8002bee:	491a      	ldr	r1, [pc, #104]	; (8002c58 <floorf+0x80>)
 8002bf0:	4119      	asrs	r1, r3
 8002bf2:	420a      	tst	r2, r1
 8002bf4:	d021      	beq.n	8002c3a <floorf+0x62>
 8002bf6:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002c5c <floorf+0x84>
 8002bfa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c06:	dd18      	ble.n	8002c3a <floorf+0x62>
 8002c08:	2a00      	cmp	r2, #0
 8002c0a:	da04      	bge.n	8002c16 <floorf+0x3e>
 8002c0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002c10:	fa40 f303 	asr.w	r3, r0, r3
 8002c14:	441a      	add	r2, r3
 8002c16:	ea22 0301 	bic.w	r3, r2, r1
 8002c1a:	ee00 3a10 	vmov	s0, r3
 8002c1e:	4770      	bx	lr
 8002c20:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002c5c <floorf+0x84>
 8002c24:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	dd03      	ble.n	8002c3a <floorf+0x62>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	db08      	blt.n	8002c48 <floorf+0x70>
 8002c36:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002c60 <floorf+0x88>
 8002c3a:	4770      	bx	lr
 8002c3c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002c40:	d3fb      	bcc.n	8002c3a <floorf+0x62>
 8002c42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002c46:	4770      	bx	lr
 8002c48:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	bf18      	it	ne
 8002c50:	eeb0 0a67 	vmovne.f32	s0, s15
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	007fffff 	.word	0x007fffff
 8002c5c:	7149f2ca 	.word	0x7149f2ca
 8002c60:	00000000 	.word	0x00000000

08002c64 <scalbnf>:
 8002c64:	b082      	sub	sp, #8
 8002c66:	ed8d 0a01 	vstr	s0, [sp, #4]
 8002c6a:	9b01      	ldr	r3, [sp, #4]
 8002c6c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	d02a      	beq.n	8002cc8 <scalbnf+0x64>
 8002c72:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002c76:	d223      	bcs.n	8002cc0 <scalbnf+0x5c>
 8002c78:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8002c7c:	d128      	bne.n	8002cd0 <scalbnf+0x6c>
 8002c7e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002c82:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8002d2c <scalbnf+0xc8>
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <scalbnf+0xcc>)
 8002c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	edcd 7a01 	vstr	s15, [sp, #4]
 8002c92:	db37      	blt.n	8002d04 <scalbnf+0xa0>
 8002c94:	9b01      	ldr	r3, [sp, #4]
 8002c96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002c9a:	3a19      	subs	r2, #25
 8002c9c:	4402      	add	r2, r0
 8002c9e:	2afe      	cmp	r2, #254	; 0xfe
 8002ca0:	dd1a      	ble.n	8002cd8 <scalbnf+0x74>
 8002ca2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002d34 <scalbnf+0xd0>
 8002ca6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002d38 <scalbnf+0xd4>
 8002caa:	9b01      	ldr	r3, [sp, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	eef0 7a40 	vmov.f32	s15, s0
 8002cb2:	bfb8      	it	lt
 8002cb4:	eeb0 0a47 	vmovlt.f32	s0, s14
 8002cb8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002cbc:	b002      	add	sp, #8
 8002cbe:	4770      	bx	lr
 8002cc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002cc4:	b002      	add	sp, #8
 8002cc6:	4770      	bx	lr
 8002cc8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8002ccc:	b002      	add	sp, #8
 8002cce:	4770      	bx	lr
 8002cd0:	0dd2      	lsrs	r2, r2, #23
 8002cd2:	4402      	add	r2, r0
 8002cd4:	2afe      	cmp	r2, #254	; 0xfe
 8002cd6:	dce4      	bgt.n	8002ca2 <scalbnf+0x3e>
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	dc0b      	bgt.n	8002cf4 <scalbnf+0x90>
 8002cdc:	f112 0f16 	cmn.w	r2, #22
 8002ce0:	da17      	bge.n	8002d12 <scalbnf+0xae>
 8002ce2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002ce6:	4298      	cmp	r0, r3
 8002ce8:	dcdb      	bgt.n	8002ca2 <scalbnf+0x3e>
 8002cea:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002d3c <scalbnf+0xd8>
 8002cee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002d40 <scalbnf+0xdc>
 8002cf2:	e7da      	b.n	8002caa <scalbnf+0x46>
 8002cf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002cf8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8002cfc:	ee00 3a10 	vmov	s0, r3
 8002d00:	b002      	add	sp, #8
 8002d02:	4770      	bx	lr
 8002d04:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002d3c <scalbnf+0xd8>
 8002d08:	eddd 7a01 	vldr	s15, [sp, #4]
 8002d0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d10:	e7d8      	b.n	8002cc4 <scalbnf+0x60>
 8002d12:	3219      	adds	r2, #25
 8002d14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002d18:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8002d1c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002d44 <scalbnf+0xe0>
 8002d20:	ee07 3a10 	vmov	s14, r3
 8002d24:	ee27 0a27 	vmul.f32	s0, s14, s15
 8002d28:	e7cc      	b.n	8002cc4 <scalbnf+0x60>
 8002d2a:	bf00      	nop
 8002d2c:	4c000000 	.word	0x4c000000
 8002d30:	ffff3cb0 	.word	0xffff3cb0
 8002d34:	7149f2ca 	.word	0x7149f2ca
 8002d38:	f149f2ca 	.word	0xf149f2ca
 8002d3c:	0da24260 	.word	0x0da24260
 8002d40:	8da24260 	.word	0x8da24260
 8002d44:	33000000 	.word	0x33000000

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 f820 	bl	8002da0 <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08003280 	.word	0x08003280
 8002d84:	08003280 	.word	0x08003280
 8002d88:	08003280 	.word	0x08003280
 8002d8c:	08003284 	.word	0x08003284

08002d90 <memset>:
 8002d90:	4402      	add	r2, r0
 8002d92:	4603      	mov	r3, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <_init>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr

08002dac <_fini>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr
